/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_xfce_Xfconf
#define DBUS_GLIB_CLIENT_WRAPPERS_org_xfce_Xfconf

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfconf_client_set_property (DBusGProxy *proxy, const char * IN_channel, const char * IN_property, const GValue* IN_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetProperty", error, G_TYPE_STRING, IN_channel, G_TYPE_STRING, IN_property, G_TYPE_VALUE, IN_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfconf_client_set_property_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfconf_client_set_property_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfconf_client_set_property_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfconf_client_set_property_async (DBusGProxy *proxy, const char * IN_channel, const char * IN_property, const GValue* IN_value, xfconf_client_set_property_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetProperty", xfconf_client_set_property_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_channel, G_TYPE_STRING, IN_property, G_TYPE_VALUE, IN_value, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfconf_client_get_property (DBusGProxy *proxy, const char * IN_channel, const char * IN_property, GValue* OUT_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetProperty", error, G_TYPE_STRING, IN_channel, G_TYPE_STRING, IN_property, G_TYPE_INVALID, G_TYPE_VALUE, OUT_value, G_TYPE_INVALID);
}

typedef void (*xfconf_client_get_property_reply) (DBusGProxy *proxy, GValue OUT_value, GError *error, gpointer userdata);

static void
xfconf_client_get_property_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GValue OUT_value = { 0, };
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_VALUE, &OUT_value, G_TYPE_INVALID);
  (*(xfconf_client_get_property_reply)data->cb) (proxy, OUT_value, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfconf_client_get_property_async (DBusGProxy *proxy, const char * IN_channel, const char * IN_property, xfconf_client_get_property_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetProperty", xfconf_client_get_property_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_channel, G_TYPE_STRING, IN_property, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfconf_client_get_all_properties (DBusGProxy *proxy, const char * IN_channel, const char * IN_property_base, GHashTable** OUT_properties, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetAllProperties", error, G_TYPE_STRING, IN_channel, G_TYPE_STRING, IN_property_base, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_properties, G_TYPE_INVALID);
}

typedef void (*xfconf_client_get_all_properties_reply) (DBusGProxy *proxy, GHashTable *OUT_properties, GError *error, gpointer userdata);

static void
xfconf_client_get_all_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_properties;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_properties, G_TYPE_INVALID);
  (*(xfconf_client_get_all_properties_reply)data->cb) (proxy, OUT_properties, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfconf_client_get_all_properties_async (DBusGProxy *proxy, const char * IN_channel, const char * IN_property_base, xfconf_client_get_all_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetAllProperties", xfconf_client_get_all_properties_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_channel, G_TYPE_STRING, IN_property_base, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfconf_client_property_exists (DBusGProxy *proxy, const char * IN_channel, const char * IN_property, gboolean* OUT_exists, GError **error)

{
  return dbus_g_proxy_call (proxy, "PropertyExists", error, G_TYPE_STRING, IN_channel, G_TYPE_STRING, IN_property, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_exists, G_TYPE_INVALID);
}

typedef void (*xfconf_client_property_exists_reply) (DBusGProxy *proxy, gboolean OUT_exists, GError *error, gpointer userdata);

static void
xfconf_client_property_exists_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_exists;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_exists, G_TYPE_INVALID);
  (*(xfconf_client_property_exists_reply)data->cb) (proxy, OUT_exists, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfconf_client_property_exists_async (DBusGProxy *proxy, const char * IN_channel, const char * IN_property, xfconf_client_property_exists_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "PropertyExists", xfconf_client_property_exists_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_channel, G_TYPE_STRING, IN_property, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfconf_client_reset_property (DBusGProxy *proxy, const char * IN_channel, const char * IN_property, const gboolean IN_recursive, GError **error)

{
  return dbus_g_proxy_call (proxy, "ResetProperty", error, G_TYPE_STRING, IN_channel, G_TYPE_STRING, IN_property, G_TYPE_BOOLEAN, IN_recursive, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfconf_client_reset_property_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfconf_client_reset_property_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfconf_client_reset_property_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfconf_client_reset_property_async (DBusGProxy *proxy, const char * IN_channel, const char * IN_property, const gboolean IN_recursive, xfconf_client_reset_property_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ResetProperty", xfconf_client_reset_property_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_channel, G_TYPE_STRING, IN_property, G_TYPE_BOOLEAN, IN_recursive, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfconf_client_list_channels (DBusGProxy *proxy, char *** OUT_channels, GError **error)

{
  return dbus_g_proxy_call (proxy, "ListChannels", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_channels, G_TYPE_INVALID);
}

typedef void (*xfconf_client_list_channels_reply) (DBusGProxy *proxy, char * *OUT_channels, GError *error, gpointer userdata);

static void
xfconf_client_list_channels_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_channels;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_channels, G_TYPE_INVALID);
  (*(xfconf_client_list_channels_reply)data->cb) (proxy, OUT_channels, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfconf_client_list_channels_async (DBusGProxy *proxy, xfconf_client_list_channels_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ListChannels", xfconf_client_list_channels_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfconf_client_is_property_locked (DBusGProxy *proxy, const char * IN_channel, const char * IN_property, gboolean* OUT_locked, GError **error)

{
  return dbus_g_proxy_call (proxy, "IsPropertyLocked", error, G_TYPE_STRING, IN_channel, G_TYPE_STRING, IN_property, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_locked, G_TYPE_INVALID);
}

typedef void (*xfconf_client_is_property_locked_reply) (DBusGProxy *proxy, gboolean OUT_locked, GError *error, gpointer userdata);

static void
xfconf_client_is_property_locked_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_locked;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_locked, G_TYPE_INVALID);
  (*(xfconf_client_is_property_locked_reply)data->cb) (proxy, OUT_locked, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfconf_client_is_property_locked_async (DBusGProxy *proxy, const char * IN_channel, const char * IN_property, xfconf_client_is_property_locked_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "IsPropertyLocked", xfconf_client_is_property_locked_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_channel, G_TYPE_STRING, IN_property, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_xfce_Xfconf */

G_END_DECLS
